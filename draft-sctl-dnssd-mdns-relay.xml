<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<rfc ipr="trust200902"
     docName="draft-sctl-dnssd-mdns-relay-02"
     category="std">

  <?rfc toc="yes"?> <?rfc symrefs="yes"?> <?rfc autobreaks="yes"?>
  <?rfc tocindent="yes"?> <?rfc compact="yes"?> <?rfc subcompact="no"?>

  <front>
    <title abbrev="mDNS Discovery Relay">Multicast DNS Discovery Relay</title>

    <author initials='S.' surname='Cheshire' fullname='Stuart Cheshire'>
      <organization>Apple Inc.</organization>
      <address>
	<postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <region>California</region>
          <code>95014</code>
          <country>USA</country>
	</postal>
	<phone>+1 408 974 3207</phone>
	<email>cheshire@apple.com</email>
      </address>
    </author>

    <author initials="T" surname="Lemon" fullname="Ted Lemon">
      <organization>Barefoot Consulting</organization>
      <address>
	<postal>
	  <street></street>
	  <city>Brattleboro</city>
	  <region>Vermont</region>
	  <country>United States of America</country>
	  <code>05301</code>
	</postal>
	<email>mellon@fugue.com</email>
      </address>
    </author>

    <date year='2017' month='October' day="30"/>

    <abstract>
      <t>
	This document extends the Discovery Proxy for Multicast DNS-Based Service Discovery
	specification.   It describes a lightweight relay mechanism, a Discovery Relay, which
	allows Discovery Proxies to provide service on links to which the hosts on which they
	are running are not directly attached.
      </t>
    </abstract>
  </front>

  <middle>
    <section anchor="intro" title="Introduction">
      <t>
	The Discovery Proxy for Multicast DNS-Based Service Discovery
	<xref target="I-D.ietf-dnssd-hybrid"/>
	is a mechanism for discovering
	services on a subnetted network through the use of Discovery Proxies,
	which issue Multicast DNS (mDNS) requests <xref target="RFC6762"/>
	on various links in the network on behalf of a remote host
	performing DNS-Based Service Discovery <xref target="RFC6763"/>.
      </t>
      <t>
        In the original Discovery Proxy specification, it is assumed that for every link on
        which services will be discovered, a host will be present running a full Discovery
	Proxy.   This document introduces a lightweight Discovery Relay which can be used
	to provide discovery services on a link without requiring a full Discovery Proxy
	on every link.
      </t>
      <t>
	The Discovery Relay operates by listening for TCP connections from Discovery Proxies.
	When a Discovery Proxy connects, the connection is authenticated and secured using TLS.
	The Discovery Proxy can then send messages that will be relayed to specified links.
	The Discovery Proxy may also specify one or more links from which it wishes to receive mDNS traffic.
	DNS Stateful Operations (DSO) <xref target="I-D.ietf-dnsop-session-signal"/> is used as
	a framework for conveying interface and IP header information associated with each message.
      </t>
      <t>
	The Discovery Relay functions essentially as a set of one or more virtual interfaces for the
	Discovery proxy, one on each link to which the Discovery Relay is connected.  In a complex
	network, it is possible that more than one Discovery Relay will be connected to the same
	link; in this case, the Discovery Proxy ideally should only be using one such Relay
	Proxy per link, since using more than one will generate duplicate traffic.
      </t>
      <t>
	How such duplication is detected and avoided is out of scope for this document: in
	principle it could be detected using HNCP <xref target="RFC7788"/> or configured using
	some sort of orchestration software in conjunction with NETCONF <xref target="RFC6241"/>
	or CPE WAN Management Protocol <xref target="TR-069"/>.
      </t>
    </section>

    <section anchor="terms" title="Terminology">
      <t>
	The following definitions may be of use:
	<list style="hanging">
	  <t hangText="mDNS Agent">
	    A host which sends and/or responds to mDNS queries.
	  </t>
	  <t hangText="Discovery Proxy">
	    A network service which receives well-formed questions using the DNS protocol,
	    performs multicast DNS queries to answer those questions, and responds with those
	    answers using the DNS protocol.
	  </t>
	  <t hangText="Discovery Relay">
	    A network service which sends mDNS messages on behalf of a Discovery Proxy and
	    relays mDNS messages to a Discovery Relay.
	  </t>
	  <t hangText="link">
	    A maximal set of network connection points such that any host connected to any
	    connection point may send a packet to a host connected to any other connection
	    point without the help of a layer 3 router.
	  </t>
	  <t hangText="whitelist">
	    A list of one or more IP addresses from which a Discovery Relay may accept
	    connections.
	  </t>
	  <t hangText="silently discard">
	    When a message that is not supported or not permitted is received, and the
	    required response to that message is to "silently discard" it, that means that
	    no response is sent by the service that is discarding the message to the service
	    that sent it.   The service receiving the message may log the event, and may also
	    count such events: "silently" does not preclude such behavior.
	  </t>
	</list>
      </t>
    </section>

    <section anchor="overview" title="Protocol Overview">
      <t>
	This document describes a way for Discovery Proxies to communicate with mDNS agents on
	networks to which they are not directly connected using a Discovery Relay.  As such, there
	are two parts to the protocol: connections between Discovery Proxies and Discovery Relays,
	and communications between Discovery Relays and mDNS agents.
      </t>

      <section anchor="tcpov" title="Connections between Discovery Proxies and Discovery Relays">
	<t>
	  Discovery Relays listen for connections.  Connections between Discovery Proxies and
	  Discovery Relays are established by Discovery Proxies. Connections are authenticated
	  and encrypted using TLS, with both client and server certificates.  Connections are
	  long-lived: a Discovery Proxy is expected to send many queries over the same
	  connection, and Discovery Relays will forward all mDNS traffic from subscribed
	  interfaces over the connection.
	</t>
	<t>
	  The stream encapsulated in TLS will carry DNS frames as in the DNS TCP protocol
	  <xref target="RFC1035"/> Section 4.2.2.   However, all messages will be DSO
	  messages <xref target="I-D.ietf-dnsop-session-signal"/>.  There will be
	  three types of such messages:
	  <list style="symbols">
	    <t>Subscribe messages from Discovery Proxy to Discovery Relay</t>
	    <t>mDNS messages from Discovery Proxy to Discovery Relay</t>
	    <t>mDNS messages from Discovery Relay to Discovery Proxy</t>
	  </list>
	</t>
	<t>
	  Subscribe messages from the Discovery Proxy to the Discovery Relay indicate to the
	  Discovery Relay that mDNS messages from one or more specified links are to be
	  relayed to the Discovery Proxy.
	</t>
	<t>
	  mDNS messages from a Discovery Proxy to a Discovery Relay cause the Discovery Relay
	  to re-transmit the mDNS message on one or more links to which the Discovery Relay
	  host is directly attached.
	</t>
	<t>
	  mDNS messages from a Discovery Relay to a Discovery Proxy are sent whenever an
	  mDNS message is received on a link to which the Discovery Relay has subscribed.
	</t>
	<t>
	  Discovery Relays are responsible for keeping connections alive when no traffic has
	  been sent during a keepalive period (See <xref target="I-D.ietf-dnsop-session-signal"/>
	  Section 4).
	</t>
      </section>

      <section anchor="mdnsov" title="mDNS Messages On Links">
	<t>
	  Discovery Relays listen for mDNS traffic on all configured links.  When a mDNS message
	  is received on a link, it is forwarded on every open Discovery Proxy connection that
	  is subscribed to mDNS traffic on that link.  In the event of congestion, where a
	  particular Discovery Proxy connection has no buffer space for an mDNS message that
	  would otherwise be forwarded to it, the mDNS message is not forwarded to it.  Normal
	  mDNS retry behavior is used to recover from this sort of packet loss.   Discovery Relays
	  are not expected to buffer more than a few mDNS packets.
	</t>
	<t>
	  Discovery Relays accept mDNS traffic from Discovery Proxies.   Such traffic is forwarded
	  to zero or more more links to which the Discovery Relay host is directly connected.
	</t>
      </section>
    </section>

    <section anchor="tlsconn" title="Connections between Discovery Proxies and Discovery Relays">
      <t>
	When a Discovery Relay starts, it opens a passive TCP listener to receive connections
	from Discovery Proxies.  This listener may be bound to one or more source IP addresses,
	or to the wildcard address, depending on the TCP implementation.  When a connection is
	received, the relay must first validate that it is a connection to an IP address to
	which connections are allowed.   For example, it may be that only connections to ULAs
	are allowed, or to the IP addresses configured on certain interfaces.   If the listener
	is bound to a specific IP address, this check is unnecessary.
      </t>
      <t>
	The relay must then validate that the source IP address of the connection is on its
	whitelist.  If the connection is not permitted either because of the source address or
	the destination address, the Discovery Relay responds to the TLS Client Hello message
	from the Discovery Proxy with a TLS user_canceled alert
	(<xref target="I-D.ietf-tls-tls13"/> Section 6.1).
      </t>
      <t>
	Otherwise, the Discovery Relay will attempt to complete a TLS handshake with the
	Discovery Proxy.  Discovery Proxies are required to send the post_handshake_auth
	extension (<xref target="I-D.ietf-tls-tls13"/> Section 4.2.5).  If a relay proxy
	receives a ClientHello message with no post_handshake_auth extension, the Discovery
	Relay rejects the connection with a certificate_required alert (<xref
	target="I-D.ietf-tls-tls13"/> Section 6.2).
      </t>
      <t>
	Once the TLS handshake is complete, the Discovery Relay MUST request post-handshake
	authentication as described in (<xref target="I-D.ietf-tls-tls13"/> Section 4.6.2).  If
	the Discovery Proxy refuses to send a certificate, or the key presented does not match
	the key associated with the IP address from which the connection originated, or the
	CertificateVerify does not validate, the connection is dropped with the TLS
	access_denied alert (<xref target="I-D.ietf-tls-tls13"/> Section 6.2).
      </t>
      <t>
	Once the connection is established and authenticated, it is treated as a DNS TCP
	connection <xref target="RFC1035"/>.
      </t>
      <t>
	Aliveness of connections between Discovery Proxies and Relays is maintained as described
	in Section 4 of <xref target="I-D.ietf-dnsop-session-signal"/>.  Discovery Proxies must
	also honor the 'Retry Delay' TLV (section 5 of
	<xref target="I-D.ietf-dnsop-session-signal"/>) if sent by the Discovery Relay.
      </t>
      <t>
	Discovery Proxies may establish more than one connection to a specific Discovery Relay.
	This would happen in the case that a TCP connection stalls, and the Discovery Proxy is
	able to reconnect before the previous connection has timed out.  It could also happen as
	a result of a server restart.  It is not likely that two active connections from the
	same Discovery Proxy would be present at the same time, but it must be possible for
	additional connections to be established.  The Discovery Relay may drop the old
	connection when the new one has been fully established, including a successful TLS
	handshake.  What it means for two connections to be from the same Discovery Proxy is
	that the connections both have source addresses that belong to the same proxy, and that
	they were authenticated using the same client certificate.
      </t>
    </section>

    <section title="Traffic from Relays to Proxies">
      <t>
	The mere act of connecting to a Discovery Relay does not result in any mDNS traffic
	being forwarded.  In order to request that mDNS traffic from a particular link be
	forwarded on a particular connection, the Discovery Proxy must send a DSO
	message containing one or more MDNS Link Request TLVs (<xref target="MDNSlinkrq"/>)
	indicating the link from which traffic is requested.
      </t>
      <t>
	When such a message is received, the Discovery Relay validates that each specified link
	is available for forwarding, and that forwarding is enabled for that link.  For each
	such message the Discovery Relay validates each link specified and includes in a single
	response a list of zero or more MDNS Link Invalid TLVs )<xref target="MDNSLinkInvalid"/>)
	for links that are not valid, and zero or more MDNS Link Subscribed TLVs (<xref
	target="MDNSlsub"/>) for links that are valid.  For each valid link, it begins forwarding
	all mDNS traffic from that link to the Discovery Proxy.  Delivery is not guaranteed: if
	there is no buffer space, packets will be dropped.  It is expected that regular mDNS
	retry processing will take care of retransmission of lost packets.  The amount of buffer
	space is implementation dependent, but generally should not be more than the bandwidth
	delay product of the TCP connection <xref target="RFC1323"/>.
      </t>
      <t>
	mDNS messages from Relays to Proxies are framed within DSO messages.
	This allows multiple TLVs to be included.  Each forwarded mDNS message is contained in
	an MDNS Message TLV <xref target="MDNSmessage"/>.  The layer 2 source address of the
	message, if known, MAY be encoded in a Layer 2 Source TLV (<xref target="l2sa"/>).  The
	source IP address of the message MUST be encoded in a IP Source Address TLV (<xref
	target="srcaddr"/>).  The source port of the message MUST be encoded in an IP Source
	port TLV (<xref target="srcpt"/>).  The link on which the message was received MUST be
	encoded in a Link Identifier TLV (<xref target="linkid"/>).  The Discovery Proxy MUST
	silently ignore unrecognized TLVs in mDNS messages, and MUST NOT discard mDNS messages
	that include unrecognized TLVs.
      </t>
      <t>
	A Discovery Proxy may discontinue listening for mDNS messages on a particular link by
	sending a DSO message containing an MDNS Link Discontinue TLV (<xref
	target="MDNSdis"/>).  Subsequent messages from that link that had previously been queued
	may arrive after listening has been discontinued.  The Discovery Proxy should silently
	ignore such messages.  The Discovery Relay MUST discontinue generating such messages as
	soon as the request is received.  The Discovery Relay does not respond to this message
	other than to discontinue forwarding mDNS messages from the specified links.
      </t>
    </section>

    <section title="Traffic from Proxies to Relays">
      <t>
	Like mDNS traffic from relays, each mDNS message sent by a Discovery Proxy to a
	Discovery Relay is encapsulated in an MDNS Message TLV (<xref target="MDNSmessage"/>)
	within a DSO message.  Each message MUST contain one or more Link
	Identifier TLVs (<xref target="linkid"/>).  The Discovery Relay will transmit the
	message to the mDNS port and multicast address on each link.  The message MUST include
	one or more IP address family TLVs (<xref target="ipfam"/>).  For each such TLVs that is
	included, the message will be sent on each link using the specified IP address family.
	If no address family codes are recognized, no packets will be transmitted.
      </t>
    </section>

    <section title="Discovery Proxy Behavior">
      <t>
	Discovery Proxies treat links for which Discovery Relay service is being used as if they
	were virtual interfaces; in other words, a Discovery Proxy serving multiple links using
	multiple Discovery Relays behaves the same as a Discovery Proxy serving multiple links
	using multiple physical network interfaces.   In this section we refer to links served
	directly by the Discovery Proxy as locally-connected links, and links served through the
	Discovery Relay as relay-connected links.
      </t>
      <t>
	What this means is that when a Discovery Proxy receives a DNSSD query, it will generate
	mDNS messages for each link for which it is acting as a proxy.  For locally-connected
	links, those messages will be sent directly.  For relay-connected links, the messages
	will be sent through the Discovery Relay that is being used to serve that lihnk.
      </t>
      <t>
	Responses from devices on locally-connected links are processed normally.  Responses
	from devices on relay-connected links are received by the Discovery Relay, encapsulated,
	and forwarded to the Discovery Proxy; the discovery proxy then processes these messages
	using the link-identifying information included in encapsulation.
      </t>
      <t>
	Discovery Proxies do not respond to mDNS queries on relay-connected links.  If an mDNS
	query is received from a Discovery Relay, the Discovery Proxy silently discards it.  It
	is assumed that any such query will be repeated using DNS service discovery.
      </t>
      <t>
	In principle it could be the case that some device is capable of performing service
	discovery using mDNS, but not using the DNS protocol.   Responding to mDNS queries received
	from the Discovery Relay could address this use case.   However, it is believed that no
	such devices exist, and therefore the preferred behavior is that all queries be resolved
	with unicast rather than multicast.
      </t>
    </section>

    <section anchor="tlvs" title="DSO TLVs">
      <t>
	This document defines a modest number of new DSO TLVs.
      </t>
      <section anchor="MDNSlinkrq" title="MDNS Link Request">
	<t>
	  The MDNS Link Request TLV conveys a 32-bit link identifier from which a Discovery
	  Proxy is requesting that a Discovery Relay forward mDNS traffic.   The link identifier
	  comes from the provisioning configuration (see <xref target="prov"/>).   The SSOP-TYPE
	  for this TLV is TBD1.   The SSOP-LENGTH is always 4.   The SSOP-DATA is the 32-bit
	  identifier in network byte order.
	</t>
      </section>
      <section anchor="MDNSLinkInvalid" title="MDNS Link Invalid">
	<t>
	  The MDNS Link Invalid TLV is returned in response to a DSO message
	  containing an MDNS Link Request, and returns the 32-bit identifier that was contained
	  in that request.  The link identifier comes from an MDNS Link Request TLV in the
	  message being responded to. The TLV indicates that the specified link identifier does
	  not refer to a valid link, either because the link is not supported by the Discovery
	  Relay, or because the identifier is not known.  The SSOP-TYPE for this TLV is TBD2.
	  The SSOP-LENGTH is always 4.  The SSOP-DATA is the 32-bit identifier in network byte
	  order.
	</t>
      </section>
      <section anchor="MDNSlsub" title="MDNS Link Subscribed">
	<!-- XXX why do we need this if we don't need MDNS Link Unsubscribed? -->
	<t>
	  The MDNS Link Subscribed TLV is returned in response to a DSO message
	  containing an MDNS Link Request, and returns the 32-bit identifier from a MDNS Link
	  Request TLV that was contained in that request.  It indicates that MDNS messages for
	  the specified link have been successfully subscribed.  The SSOP-TYPE for this TLV is
	  TBD3.  The SSOP-LENGTH is always 4.  The SSOP-DATA is the 32-bit identifier in network
	  byte order.
	</t>
      </section>
      <section anchor="MDNSmessage" title="MDNS Message">
	<t>
	  The MDNS Message TLV is used to encapsulate an mDNS message that is being forwarded
	  from a link to a Discovery Proxy, or is being forwarded from a Discovery Proxy to a
	  link.  The SSOP-TYPE for this TLV is TBD4.  SSOP-LENGTH is the length of the
	  application layer payload of the MDNS message.  SSOP-DATA is the application layer
	  payload of the message.
	</t>
      </section>
      <section anchor="l2sa" title="Layer 2 Source Address">
	<t>
	  The Layer 2 Source Address TLV is used to report the link-layer address from which an
	  mDNS message was received.  This TLV is optionally present in DSO
	  messages from Discovery Relays to Discovery Proxies that contain mDNS messages when
	  the source link-layer address is known.  The SSOP-TYPE is TBD5.  SSOP-LENGTH is
	  variable, depending on the length of link-layer addresses on the link from which the
	  message was received.  SSOP-data is the link-layer address as it was received on the
	  link.
	</t>
      </section>
      <section anchor="srcaddr" title="IP Source Address">
	<t>
	  The IP Source Address TLV is used to report the IP source address from which an mDNS
	  message was received.  This TLV is present in DSO messages from
	  Discovery Relays to Discovery Proxies that contain mDNS messages.  SSOP-TYPE is TBD6.
	  SSOP-LENGTH is either 4, for an IPv4 address, or 16, for an IPv6 address.  SSOP-DATA
	  is the IP Address.
	</t>
      </section>
      <section anchor="srcpt" title="IP Source Port">
	<t>
	  The IP Source Port TLV is used to report the IP source port from which an mDNS message
	  was received.  This TLV is present in DSO messages from Discovery Relays
	  to Discovery Proxies.  SSOP-TYPE is TBD7.  SSOP-LENGTH is 2.  SSOP-DATA is the source
	  port in network byte order.
	</t>
      </section>
      <section anchor="linkid" title="Link Identifier">
	<t>
	  This option is used both in DSO messages from Discovery Proxies to
	  Discovery Relays that contain mDNS messages, and in message from Discovery Relays to
	  Discovery Proxies that contain mDNS messages.   In the former case, it indicates a
	  link to which the message should be forwarded; in the latter case, it indicates the
	  link on which the message was received.   SSOP-TYPE is TBD8.   SSOP-LENGTH is 4.
	  SSOP-DATA is a 32-bit link identifier as described in <xref target="prov"/>.
	</t>
      </section>
      <section anchor="MDNSdis" title="MDNS Discontinue">
	<t>
	  This option is used by Discovery Proxies to unsubscribe to mDNS messages on the
	  specified link.  More than one may be present in a single DSO message.
	  SSOP-TYPE is TBD9.  SSOP-LENGTH is 4.  SSOP-DATA is a 32-bit link identifier as
	  described in <xref target="prov"/>.
	</t>
      </section>
      <section anchor="ipfam" title="IP Address Family">
	<t>
	  This option is used in mDNS messages sent by Discovery Proxies to links to indicate to
	  the Discovery Relay which IP address family or families should be used when
	  transmitting the message on the link.  More than one may be present in a single
	  DSO message.  SSOP-TYPE is TBD10.  SSOP-LENGTH is 1.  SSOP-DATA is a
	  8-bit IP family identifier.  A value of 1 indicates IPv4.  A value of 2 indicates
	  IPv6.   Other values are reserved, and MUST be ignored if not recognized.
	</t>
      </section>
    </section>

    <section anchor="prov" title="Provisioning">
      <t>
	In order for a Discovery Proxy to use Discovery Relays, it must be configured with
	sufficient information to identify links on which service discovery is to be supported
	and connect to discovery relays supporting those links, if it is not running on a host
	that is directly connected to those links.
      </t>
      <t>
	A Discovery Relay must be configured both with a set of links to which the host on which
	it is running is connected, on which mDNS relay service is to be provided, and also with
	a list of one or more Discovery Proxies authorized to use it.
      </t>
      <t>
	On a network supporting DNS Service Discovery using Discovery Relays, more than one
	different Discovery Relay implementation is likely be present.  While it may be that
	only a single Discovery Proxy is present, that implementation will need to be able to be
	configured to interoperate with all of the Discovery Relays that are present.
	Consequently, it is necessary that a standard set of configuration parameters be defined
	for both Discovery Proxies and Discovery Relays.
      </t>
      <t>
	DNS Service Discovery generally operates within a constrained set of links, not across
	the entire internet.  This section assumes that what will be configured will be a
	limited set of links operated by a single entity or small set of cooperating entities,
	among which services present on each link should be available to users on that link and
	every other link.  This could be, for example, a home network, a small office network,
	or even a network covering an entire building or small set of buildings.  The set of
	Discovery Proxies and Discovery Relays within such a network will be referred to in this
	section as a 'Discovery Domain'.
      </t>
      <t>
	Depending on the context, several different candidates for configuration of Discovery
	Proxies and Discovery relays may be applicable.  The simplest such mechanism is a
	configuration file.
      </t>
      <section title="Provisioned Objects">
	<t>
	  Three types of objects must be described in order for Discovery Proxies and Discovery
	  Relays to be provisioned: Discovery Proxies, Links, and Discovery Relays.
	  "Human-readable" below means actual words or proper names that will make sense to an untrained
	  human being.   "Machine-readable" means a name that will be used by machines to identify
	  the entity to which the name refers.   Each entity must have a machine-readable name and
	  may have a human-readable name.   Every name must be unique: no two entities can have
	  the same human-readable name nor machine-readable name.   Machine-readable names should
	  generally look like single domain-name labels, although this is only technically required
	  for link names.
	</t>
	<section title="Discovery Proxy">
	  <t>
	    The description of a Discovery Proxy consists of:
	    <list style="hanging">
	      <t hangText="name">
		a machine-readable name used to reference this discovery proxy in provisioning.
	      </t>
	      <t hangText="hr-name">
		an optional human-readable name which can appear in provisioning, monitoring and
		debugging systems.  Must be unique within a Discovery Domain.
	      </t>
	      <t hangText="public-key">
		a public key that identifies the Discovery Proxy. This key can be shared across
		services on the Discovery Proxy Host.  The public key is used both to uniquely
		identify the Discovery Proxy and to authenticate connections from it.
	      </t>
	      <t hangText="private-key">
		the private key corresponding to the public key.
	      </t>
	      <t hangText="source-ip-addresses">
		a list of IP addresses that may be used by the Discovery Proxy when connecting
		to Discovery Relays.   These addresses should be addresses that are configured
		on the Discovery Proxy Host.   They should not be temporary addresses.   All
		such addresses must be reachable within the Discovery Domain.
	      </t>
	      <t hangText="public-ip-addresses">
		a list of IP addresses that may be used to submit DNS queries to the Discovery
		Proxy.  This is not used for interoperation with Discovery Relays, but is
		mentioned here for completeness: this list of addresses may differ from the
		'source-ip-addresses' list.  If any of these addresses are reachable from outside
		of the Discovery Domain, services in that domain will be discoverable outside of
		the domain.
	      </t>
	      <t hangText="links">
		a list of links on which this Discovery Proxy is expected to provide service
	      </t>
	    </list>
	  </t>
	  <t>
	    The private key should never be distributed to other hosts; all of the other
	    information describing a Discovery Proxy can be safely shared with Discovery Relays.
	  </t>
	</section>
	<section title="Link">
	  <t>
	    The description of a link (See <xref target="RFC8200"/> Section 2) consists of:
	    <list style="hanging">
	      <t hangText="hr-name">
		An optional human-readable name for the link.  This name MUST be unique within
		the Discovery Domain.  Each link MUST have exactly one such name.
	      </t>
	      <t hangText="link-identifier">
		An 32-bit identifier that uniquely identifies that link within the Discovery
		Domain.  Each link MUST have exactly one such identifier.  Link Identifiers do
		not have any special semantics, and are not intended to be human-readable.
	      </t>
	      <t hangText="name">
		An identifier for the link that is used to form an LDH domain name as described
		in <xref target="I-D.ietf-dnssd-hybrid"/>, section 5.3.   This is a single DNS
		label, not the entire domain name.   This name is used to identify the link
		during provisioning, and must be present
	      </t>
	    </list>
	  </t>
	  <t>
	    The 'name' and 'label-name' names can be used to form the LDH and human-readable
	    domain names as described in <xref target="I-D.ietf-dnssd-hybrid"/>, section 5.3.  A
	    single Discovery Domain is likely to have a single domain in which all links will be
	    named, so to form the LDH (letters, digits, hyphens) FQDN for each link, the
	    'ldh-name' is prepended to the Discovery Domain's domain name.  To form the
	    human-readable FQDN, prepend 'name' to the Discovery Domain's domain name.
	  </t>
	  <t>
	    For example, if the Discovery Domain's domain name is 'example.com', 'name' is
	    'Building 2 South' and 'ldh-name' is 'bldg2s', then the LDH domain name for the link
	    would be 'bldg2s.example.com' and the human-readable name would be 'Building 2
	    South.example.com'.
	  </t>
	</section>
	<section title="Discovery Relay">
	  <t>
	    The description of a Discovery Relay consists of:
	    <list style="hanging">
	      <t hangText="name">
		a required machine-readable identifier used to reference the relay
	      </t>
	      <t hangText="hr-name">
		an optional human-readable name which can appear in provisioning, monitoring and
		debugging systems.  Must be unique within a Discovery Domain.
	      </t>
	      <t hangText="public-key">
		a public key that identifies the Discovery Relay. This key can be shared across
		services on the Discovery Relay Host.  Indeed, if a Discovery Proxy and Discovery
		Relay are running on the same host, the same key may be used for both.  The public
		key uniquely identifies the Discovery Relay and is used by the Discovery Proxy
		to verify that it is talking to the intended Discovery Relay after a TLS connection
		has been established.
	      </t>
	      <t hangText="private-key">
		the private key corresponding to the public key.
	      </t>
	      <t hangText="connect-tuples">
		a list of IP address/port tuples that may be used to connect to the Discovery
		Relay.  The relay may be configured to listen on all addresses on a single port,
		but this is not required, so the port as well as the address must be specified.
	      </t>
	      <t hangText="links">
		a list of links to which this relay is physically connected.
	      </t>
	    </list>
	  </t>
	  <t>
	    The private key should never be distributed to other hosts; all of the other
	    information describing a Discovery Relay can be safely shared with Discovery
	    Proxies.
	  </t>
	</section>
      </section>
      <section title="Configuration Files">
	<t>
	  For this discussion, we assume the simplest possible means of configuring Discovery
	  Proxies and Discovery Relays: the configuration file.  Any environment where changes
	  will happen on a regular basis will either require some automatic means of generating
	  these configuration files as the network topology changes, or will need to use a more
	  automatic method for configuration, such as HNCP.
	</t>
	<t>
	  There are many different ways to organize configuration files.  This discussion
	  assumes that links, relays and proxies will be specified as objects, as described
	  above, perhaps in a master file, and then the specific configuration of each proxy
	  or relay will reference the set of objects in the master file, referencing objects
	  by name.   This approach is not required, but is simply shown as an example.
	  In addition, the private keys for each relay and proxy must appear only in that
	  relay or proxy's configuration file.
	</t>
	<t>
	  The master file contains a list of Discovery Relays, Discovery Proxies and Links.
	  Each object has a name and all the other data associated with it.   We do not formally
	  specify the format of the file, but it might look something like this:
	</t>
	<figure><artwork align="center"><![CDATA[
Relay upstairs
  public-key xxx
  connect-tuple 192.0.2.1 1917
  connect-tuple fd00::1 1917
  link upstairs-wifi
  link upstairs-wired
Relay downstairs
  public-key xxx
  connect-tuple 192.51.100.1 2088
  connect-tuple fd00::2 2088
  link downstairs-wifi
  link downstairs-wired
Proxy main
  public-key xxx
  address 203.1.113.1
Link upstairs-wifi
  id 1
  name "Upstairs Wifi"
Link upstairs-wired
  id 2
  hr-name "Upstairs Wired"
Link downstairs-wifi
  id 3
  name "Downstairs Wifi"
Link downstairs-wired
  id 4
  hr-name "Downstairs Wired"]]></artwork></figure>
      </section>
      <section title="Discovery Proxy Configuration">
	<t>
	  The Discovery Proxy configuration contains enough information to identify which
	  Discovery Proxy is being configured, enumerate the list of links it is intended to serve,
	  and provide keying information it can use to authenticate to Discovery Relays.   It
	  may also contain custom information about the port and/or IP address(es) on which it
	  will respond to DNS queries.
	</t>
	<t>
	  An example configuration, following the convention used in this section, might look
	  something like this:
	</t>
	<figure><artwork align="center"><![CDATA[
Proxy
[placeholder, to be completed later]
]]></artwork></figure>
      </section>
      <section title="Discovery Relay Configuration">
	<t>
	</t>
      </section>
    </section>

    <section anchor="security" title="Security Considerations">
    </section>

    <section title="IANA Considerations">
      <t>
	The IANA is kindly requested to update the DSO Type Codes Registry
	<xref target="I-D.ietf-dnsop-session-signal"/> by allocating codes for each of the TBD
	type codes listed in the following table, and by updating this document, here and in
	<xref target="tlvs"/>.  Each type code should list this document as its reference
	document.
      </t>
      <texttable title="DSO Type Codes to be allocated">
	<ttcol>Opcode</ttcol>	<ttcol>Status</ttcol>	<ttcol>Name</ttcol>
	<c>TBD1</c>		<c>Standard</c>		<c>MDNS Link Request</c>
	<c>TBD2</c>		<c>Standard</c>		<c>MDNS Link Invalid</c>
	<c>TBD3</c>		<c>Standard</c>		<c>MDNS Link Subscribed</c>
	<c>TBD4</c>		<c>Standard</c>		<c>MDNS Messsage</c>
	<c>TBD5</c>		<c>Standard</c>		<c>Layer Two Source Address</c>
	<c>TBD6</c>		<c>Standard</c>		<c>IP Source Address</c>
	<c>TBD7</c>		<c>Standard</c>		<c>IP Destination Address</c>
	<c>TBD8</c>		<c>Standard</c>		<c>Link Identifier</c>
	<c>TBD9</c>		<c>Standard</c>		<c>MDNS Discontinue</c>
	<c>TBD10</c>		<c>Standard</c>		<c>IP Address Family</c>
      </texttable>
    </section>

    <section title="Acknowledgments">
    </section>
  </middle>

  <back>

    <references title="Normative References">
      <?rfc include="reference.RFC.1035.xml"?>
      <?rfc include="reference.RFC.1323.xml"?>
      <?rfc include="reference.RFC.6241.xml"?>
      <?rfc include="reference.RFC.6762.xml"?>
      <?rfc include="reference.RFC.6763"?>
      <?rfc include="reference.RFC.7788"?>
      <?rfc include="reference.RFC.8200"?>
      <?rfc include="reference.I-D.ietf-dnssd-hybrid"?>
      <?rfc include="reference.I-D.ietf-dnsop-session-signal"?>
      <?rfc include="reference.I-D.ietf-tls-tls13"?>
    </references>

    <references title="Informative References">
      <reference anchor="TR-069"
                 target="https://www.broadband-forum.org/technical/download/TR-069_Amendment-5.pdf">
        <front>
          <title>CPE WAN Management Protocol</title>

          <author>
            <organization>Broadband Forum</organization>
          </author>

          <date month="November" year="2013"/>
        </front>
      </reference>
    </references>
  </back>
</rfc>
